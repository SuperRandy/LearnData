<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>LearnData-开源笔记</title>
    <link>https://newzone.top/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Sat, 27 Jan 2024 09:28:41 GMT</pubDate>
    <lastBuildDate>Sat, 27 Jan 2024 09:28:41 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>博客</category>
    <category>工具</category>
    <category>自动化</category>
    <category>系统</category>
    <category>头脑驿站</category>
    <item>
      <title>Jekyll 篇二：自动部署服务器博客</title>
      <link>https://newzone.top/posts/2018-05-03-jekyll_blog_autodeploy.html</link>
      <guid>https://newzone.top/posts/2018-05-03-jekyll_blog_autodeploy.html</guid>
      <source url="https://newzone.top/rss.xml">Jekyll 篇二：自动部署服务器博客</source>
      <description>Github 上搭建 Jekyll 是最方便的，空间免费、流量免费、部署简单。但 Github 属于被墙状态，将博客部署在那，速度实在太慢。在玩了几天后，我开始在服务器上直接搭建 Jekyll 博客。 服务器搭建需要人工执行 jekyll build, 完全背离了最开始搭建博客的初衷-方便。之后结合了网络上多个自动化方案，选定入门成本最低的 Github -&amp;gt; Travis CI -&amp;gt; Docker-&amp;gt; VPS。</description>
      <category>博客</category>
      <pubDate>Thu, 03 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Github 上搭建 Jekyll 是最方便的，空间免费、流量免费、部署简单。但 Github 属于被墙状态，将博客部署在那，速度实在太慢。在玩了几天后，我开始在服务器上直接搭建 Jekyll 博客。</p>
<p>服务器搭建需要人工执行 <code>jekyll build</code>, 完全背离了最开始搭建博客的初衷-<strong>方便</strong>。之后结合了网络上多个自动化方案，选定入门成本最低的 <code>Github</code> -&gt; <code>Travis CI</code> -&gt; <code>Docker</code>-&gt; <code>VPS</code>。</p>
<h2> 搭建思路</h2>
<ul>
<li>本地提交博客 Markdown 文件 到 Github 源文件 repository</li>
<li>Github 触发 Travis CI 执行自动编译</li>
<li>Travis CI 编译后 push 静态文件到 Github 静态文件 repository</li>
<li>Travis CI 通知 Docker 重建镜像（预计 5 分钟）</li>
<li>服务器休眠 5 分钟后，Travis CI 通知服务器</li>
<li>服务器拉取最新镜像，然后停止并删除原容器，用最新镜像重建容器</li>
</ul>
<h2> Travis CI 基本配置</h2>
<p>Travis CI 对于开源项目完全免费，并且能自动感知到 Github 的 commit，帮我们解决了静态文件生成问题。</p>
<p>先用 Github 登录 Travis CI，然后点击最右侧的头像，开启想要使用 Travis CI 的项目</p>
<figure><img src="https://img.newzone.top/20180504135244.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击设置按钮，进入项目设置</p>
<figure><img src="https://img.newzone.top/20180504135541.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 静态文件更新</h2>
<p>Travis CI push 静态文件到 Github 通过 Github 的 token 实现授权，push 代码如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>$DEPLOY_TOKEN</code> 是从 Github 授权得到的，「setting」&gt;「Developer settings」&gt;「Personal access tokens」&gt;「Generate new token」, 然后给于相应权限即可，<code>admin:public_key, admin:repo_hook, repo</code>。</p>
<figure><img src="https://img.newzone.top/20180504153729.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>进入 Travis 的 repo 项目，「More options」&gt;「Settings」&gt;「Environment Variables」, 新建一个变量<code>DEPLOY_TOKEN</code>，把 Github 的授权 token 保存在里面。</p>
<figure><img src="https://img.newzone.top/20180504154229.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>Travis CI 提供了存放加密文件的方式，参考 <a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h2> Dockerfiles 设置</h2>
<p>在 Github 中新建一个 repository，可以命名为 <code>dockerfiles</code>, 专门用来存储 Docker 镜像的设置文件。在 <code>dockerfiles</code> 新建文件夹 <code>jekyll</code> ，并在 <code>jekyll</code> 中新建文件 <code>Dockerfile</code>, 放入以下代码：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 Travis CI 生成的静态文件推送到 Github，博客的 docker 化部署，采用 nginx + 静态文件 方式</p>
<p>样例 Dockerfile: <a href="https://github.com/mritd/dockerfile/tree/master/mritd" target="_blank" rel="noopener noreferrer">https://github.com/mritd/dockerfile/tree/master/mritd</a></p>
<h2> Docker 镜像设置</h2>
<p>注册并登录 <a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">Docker Hub</a>，点击 「Create」&gt;「Create Automated Build」&gt;「Create Auto-build Github」, 选择之前新建的 <code>dockerfiles</code> repository。</p>
<p>建立 Automated Build 镜像后，进入 <code>Build Seeting</code>, 点击 Trigger，建立第一个 Docker 镜像。</p>
<figure><img src="https://img.newzone.top/20180504161016.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后在「Building Settings」&gt;「Build Triggers」&gt;「Activate Triggers」，复制 Trigger URL。</p>
<figure><img src="https://img.newzone.top/20180504161245.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后在服务器上执行下列代码，拉取并<strong>启动 Docker 镜像</strong>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>--name=jekyll_blog 中的 <code>jekyll_blog</code> 是对容器的命名，方便后续操作。</p>
<p>-d 让容器在后台运行。</p>
<p>-p 映射端口：80 是容器内对应的端口，39100 是主机端口，也就是最终用户访问的端口，本端口可以自由选择。</p>
<p>--privileged=true 关闭安全权限，否则你容器操作文件夹没有权限。</p>
<p>--<code>rockben/jekyll:latest</code> 是容器名称，可省略 <code>:latest</code>。</p>
<p>运行容器后，访问 <code>seoipo.com:39100</code> 就可以看到镜像网页。如果每次用端口访问，可以在域名 DNS 中设置显性 URL，将二级域名 <code>blog.seoipo.com</code> 指向 <code>seoipo.com:39100</code></p>
<h3> Docker 扩展阅读</h3>
<p><strong>Docker 命令符</strong>：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>docker run</code> 进阶设置</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-v 挂载目录/root/software 本地目录 /software 容器目录，在创建前容器是没有 software 目录的，docker 容器会自己创建
--<code>/bin/bash</code> 这是 CMD 命令行，可不填</p>
<h2> SSH 免密码登录</h2>
<p>Travis 不能利用用户名和密码登陆，我们只有利用<strong>SSH 免密登陆</strong>服务器，更新并重启 Docker 容器。</p>
<p><strong>1、生成公钥/私钥对</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、将生成的公钥添加为受信列表</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、在.ssh 目录下新增配置文件 config</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>点击 <code>i</code> 进入编辑状态，输入下列代码。完毕后，点击 <code>Esc</code> 退出编辑状况，然后输入 <code>:wq!</code> 强制保存后离开文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、在 Linux 服务器安装 Travis 客户端</strong>（rvm -&gt; ruby -&gt; gem -&gt;Travis）</p>
<p><code>gem install travis</code></p>
<p><strong>5、服务器创建空白<code>.travis.yml</code>文件</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6、服务器登录 Travis，添加加密的私钥至代码仓库</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>成功加密后，会提示</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p><strong>将新生成的 <code>id_rsa.enc</code> 文件上传到 Github 源文件 repository 中</strong></p>
</li>
<li>
<p>将 <code>.travis.yml</code> 中的 <code>openssl aes-256-cbc -K $encrypted_5c280379e96c_key -iv $encrypted_5c280379e96c_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d</code> 放入最终的 <code>.travis.yml</code> 文件中。</p>
<figure><img src="https://img.newzone.top/20180504184508.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ul>
<h2> travis.yml 配置</h2>
<p>当项目内存在 <code>.travis.yml</code> 文件时，Travis CI 会按照其定义完成自动 build 过程，所以开启了上述配置以后还要在 Github 的 Jekyll 源文件项目下创建 <code>.travis.yml</code> 配置文件。</p>
<figure><img src="https://img.newzone.top/20180504141827.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><code>.travis.yml</code> 配置文件内容样例如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体 .travis.yml 配置，请参考 <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<p>参考资料&amp;引用：</p>
<ul>
<li>
<p><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener noreferrer">Jekyll 模板 hux blog</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/25066056" target="_blank" rel="noopener noreferrer">一点都不高大上，手把手教你使用 Travis CI 实现持续部署</a></p>
</li>
<li>
<p><a href="https://mritd.me/2017/02/25/jekyll-blog-+-travis-ci-auto-deploy/" target="_blank" rel="noopener noreferrer">Jekyll + Travis CI 自动化部署博客</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5a9e1a5751882555712bd8e1" target="_blank" rel="noopener noreferrer">Travis-CI 自动化测试并部署至自己的 CentOS 服务器</a></p>
</li>
<li>
<p><a href="https://segmentfault.com/a/1190000011218410" target="_blank" rel="noopener noreferrer">Travis CI 系列：自动化部署博客</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5a2941ad6fb9a045030ffc95" target="_blank" rel="noopener noreferrer">SSH 免密登录远程服务器</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/scofi/p/6617394.html" target="_blank" rel="noopener noreferrer">SSH 公钥登录原理</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/yinweitao12/article/details/73165914" target="_blank" rel="noopener noreferrer">如何将 dockerhub 与 github 关联</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/YasinXiao/p/7736075.html" target="_blank" rel="noopener noreferrer">docker 启动，端口映射，挂载本地目录</a></p>
</li>
<li>
<p><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener noreferrer">Docker — 从入门到实践</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/20180504135244.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>抛弃迅雷，Aria2 新手入门</title>
      <link>https://newzone.top/posts/2018-05-15-aria2_a_new_download_tool.html</link>
      <guid>https://newzone.top/posts/2018-05-15-aria2_a_new_download_tool.html</guid>
      <source url="https://newzone.top/rss.xml">抛弃迅雷，Aria2 新手入门</source>
      <description>迅雷已经用了 10 年，一直将它视为最快也最方便的下载工具，也一直购买迅雷会员。 但是，迅雷已经堕落。 thunder:\\ 迅雷专属链接越来越少，下载基本是磁力链接和 BT 种子； 迅雷会员加速不再有效，大量资源速度为 0（会员虽然还有一年多，但已经没用了）； 迅雷关闭旧版功能，迫使大家升级迅雷 U 享版，但升级后，发现新版迅雷会强制接收所有下载。 有些小文件，我只想用浏览器直接下载，而一些不想下载的链接，也会被迅雷非常敏感地感应到，强制下载，真的特别流氓。</description>
      <category>工具</category>
      <pubDate>Tue, 15 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>迅雷已经用了 10 年，一直将它视为最快也最方便的下载工具，也一直购买迅雷会员。</p>
<p>但是，<strong>迅雷已经堕落</strong>。</p>
<ul>
<li><code>thunder:\\</code> 迅雷专属链接越来越少，下载基本是磁力链接和 BT 种子；</li>
<li>迅雷会员加速不再有效，大量资源速度为 0（会员虽然还有一年多，但已经没用了）；</li>
<li>迅雷关闭旧版功能，迫使大家升级迅雷 U 享版，但升级后，发现新版迅雷会强制接收所有下载。
<blockquote>
<p>有些小文件，我只想用浏览器直接下载，而一些不想下载的链接，也会被迅雷非常敏感地感应到，强制下载，真的特别流氓。</p>
</blockquote>
</li>
</ul>
<h2> 为什么选择 Aria2？</h2>
<p>Aria2 下载功能比较全面，支持 BT 和磁力链接，性能也相当不错，<strong>速度不比迅雷慢</strong>。</p>
<p>虽然没有原生应用界面，配置也比较麻烦，但这些可以通过懒人包轻松解决。</p>
<h2> 真·懒人包</h2>
<p>Aria2 真·懒人包无需配置，下载即可使用，适合不想折腾的人。</p>
<p>真·懒人包：<a href="https://www.seoipo.com/software/Aria2/" target="_blank" rel="noopener noreferrer">https://www.seoipo.com/software/Aria2/</a></p>
<p>将懒人包解压到 <code>D:\Aria2</code>，点击 <code>AriaNg 启动器.exe</code> 即可开始下载。两个启动器任选其一，都集成了后端服务和前端 UI，无需启动其他程序。包内均为开源绿色软件，不涉及任何隐私和安装，AutoHotkey 插件容易被误报。</p>
<p>2023.12.03 更新 Aria2 1.37.0，AriaNG 1.3.7，重构启动器，并增加 bt-tracker 至 108 个，以便 BT 和磁力链接提速。</p>
<p>新增功能：任务开始、完成和出错时，会推送系统通知，可在 aria2.conf 的特别功能区块中设置通知的开启与关闭，此功能由 @我真的爱发明 提出。</p>
<hr>
<p>如果不想使用懒人包，想了解 Aria2 背后的设置，请往下看配置步骤。</p>
<h2> Aria2 设置</h2>
<ol>
<li>
<p>下载 <a href="https://aria2c.com/archiver/aria2.zip" target="_blank" rel="noopener noreferrer">Aria2 快速设置包</a>或<a href="https://wwz.lanzouf.com/iROZE0eai3xe" target="_blank" rel="noopener noreferrer">备用链接</a>，将其解压到存放文件夹，例如 <code>D:\Aria2</code>。</p>
</li>
<li>
<p>官网下载 <a href="https://github.com/aria2/aria2/releases" target="_blank" rel="noopener noreferrer">Aria2 程序</a>（Windows 选择 <a href="https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-win-64bit-build1.zip" target="_blank" rel="noopener noreferrer">aria2-1.37.0-win-64bit-build1.zip</a>），然后解压到快速设置包的存放文件夹中，替代其中的 <code>aria2c.exe</code> 程序。</p>
<figure><img src="https://img.newzone.top/20191210232831.png" alt="" tabindex="0" loading="lazy"><figcaption>GitHub 官方仓库下载 Aria2</figcaption></figure>
</li>
<li>
<p>点击 <code>aria2.exe</code> 启动 aria2，系统托盘区会同步出现应用图标。</p>
</li>
<li>
<p>参照<a href="https://wwz.lanzouf.com/iwv6f0eadq9i" target="_blank" rel="noopener noreferrer">懒人包配置</a>修改 <code>aria2.conf</code>，更多设置参考 <a href="https://aria2.github.io/manual/en/html/aria2c.html" target="_blank" rel="noopener noreferrer">aria2c 官方文档</a>。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><a class="footnote-anchor" id="footnote-ref1">
<p>修改默认下载目录：</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改服务器默认连接数：</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改监听端口 6800：</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 BT 下列设置：</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></a><p><a class="footnote-anchor" id="footnote-ref1">在文档最后一行添加 BT trackers，最新 trackers 列表从 </a><a href="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt" target="_blank" rel="noopener noreferrer">ngosang/trackerslist</a> 中获取，tracker 中用 <code>,</code> 隔开。</p>
<div class="language-conf line-numbers-mode" data-ext="conf"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他设置不常用，有时间的话，你可以慢慢调整。</p>
</li>
<li>
<p>Aira2 没有原生应用界面，可以输入网址 <code>http://aria2c.com</code> 使用第三方下载界面。该页面会自动与本地的 aira2c 程序关联，实现下载管理，建议把其收藏到书签，以便日后使用。<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><a class="footnote-anchor" id="footnote-ref2">
</a></li><a class="footnote-anchor" id="footnote-ref2">
</a></ol><a class="footnote-anchor" id="footnote-ref2">
</a><p><a class="footnote-anchor" id="footnote-ref2">如果出现「Aria2 RPC 服务器错误」，请检查 JSON-RPC Path 是否为 <code>http://localhost:6800/jsonrpc</code>。注意，页面<strong>链接须为 http 而非 https</strong>。如果依然报错，则说明 aria2.conf 配置有误，建议下载 </a><a href="https://www.seoipo.com/software/Aria2/" target="_blank" rel="noopener noreferrer">真·懒人包</a>。</p>
<h2> Aria2 进阶</h2>
<h3> 更换 Aria2 界面</h3>
<p><a href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener noreferrer">AriaNg</a> 提供了类似传统下载软件的界面，简便易用。</p>
<figure><img src="https://img.newzone.top/20180516104758.png" alt="" tabindex="0" loading="lazy"><figcaption>AriaNg 界面</figcaption></figure>
<p>使用方法：下载并解压 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener noreferrer">AriaNg</a> AllInOne，运行目录下的 index.html，打开 Aria2 WebUI 界面，将页面链接收藏到书签以便后续使用 Aria2。注意，本地运行要用 AllInOne 版本，否则会出现 <code>cannot get language resources, and will display in default language</code>。</p>
<p>操作步骤如下：首先，下载并解压 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener noreferrer">AriaNg</a> AllInOne 版本。然后，运行目录中的 index.html 文件，以打开 Aria2 WebUI 界面。为方便后续使用，建议将页面链接添加至书签。需注意，本地运行需使用 AllInOne 版本，否则可能会出现 <code>cannot get language resources, and will display in default language</code> 的错误提示。</p>
<p>如果 AriaNg 页面未连接的错误信息，则在页面左侧选择「AriaNg 设置」&gt;「RPC」，检查 RPC 地址是否正确。默认地址应为 <code>localhost:6800</code>。</p>
<h3> Aira2 下载预热</h3>
<p>Aira2 下载预热是 BT 下载前的必备步骤，否则速度容易很慢。</p>
<p>找一个热门影视的 BT 种子（注意是种子，不是磁力链接），然后下载并挂着做种。过几个小时后，退出 Aria2 或者等待 Aria2 会话自动保存，你会发现 dht.dat 从空文件变成有数据了，之后的 BT 下载速度就会快很多。</p>
<blockquote>
<p>很多 BT 客户端一样，Aria2 有个 dht.dat 文件 (开启 ipv6 还有个 dht6.dat)，这玩意用于存储一种叫做 DHT Routing Table 的东西，DHT 网络由无数节点组成，你接触到一个后能通过它接触到更多的节点，Aria2 我记得是有内置的节点，但是！如果你在 Aria2 第一次运行的时候直接下载磁力链接或者冷门种子，你很可能遇到连 MetaData 都无法获取的情况，这就是因为第一次只是初始化 dht.dat 文件，你本地不存在 DHT Routing Table 的缓存，所以你无法从 DHT 网络中获取足够的数据。<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><a class="footnote-anchor" id="footnote-ref3">
</a></blockquote><a class="footnote-anchor" id="footnote-ref3">
</a><h3><a class="footnote-anchor" id="footnote-ref3"></a> 接管浏览器下载</h3>
<p>如果想用 Aria2 接管浏览器的下载管理，需安装插件/扩展。</p>
<ul>
<li>Chrome：安装<a href="https://chrome.google.com/webstore/detail/nimeojfecmndgolmlmjghjmbpdkhhogl" target="_blank" rel="noopener noreferrer">添加到 aria2</a> 扩展。下载包可以用<a href="https://wwi.lanzoui.com/i4Fmeetsdaj" target="_blank" rel="noopener noreferrer">国内搬运地址</a>，或是懒人包内置文件。
如果浏览器无法直接安装 <code>.crx</code> 格式的扩展，可以将文件解压到新文件夹「xxx」，然后在浏览器的地址栏输入 <code>chrome://extensions/</code> 开启开发者模式，点击加载已解压的扩展程序，选中刚才解压的文件夹「xxx」。</li>
<li>Firefox：安装 <a href="https://addons.mozilla.org/en-US/firefox/addon/aria2-integration/" target="_blank" rel="noopener noreferrer">Aria2 Download Manager Integration</a> 扩展，可参考下方的 Chrome 扩展设置进行配置。</li>
</ul>
<p>安装完「添加到 aria2」扩展后，右键扩展图标，点击「选项」&gt;「设置」，设置如下：</p>
<ul>
<li>最小监视：<code>10</code> M，低于该容量将由浏览器下载。如果 Aria2 要接手所有下载，可以将最小监视设为 <code>0.001</code>。</li>
<li>JSON-RPC 链接：<code>http://localhost:6800/jsonrpc</code>。</li>
</ul>
<p>注意：「添加到 aria2」图标显示的 <code>en</code> 表示处于开启状态，<code>dis</code> 表示处于关闭状态，点击图标可以切换使用状态。</p>
<h2> Aria2 启动器</h2>
<p>每次启动 Aria2 下载时，都需要执行两个文件：打开 WebUI 链接和 aria2c，这有点麻烦。因此，我使用 AutoHotkey 做了一个启动器，它可以检测 aria2c 运行状态，并一键打开下载界面，以简化 Aria 的启动过程。</p>
<p>下载 <a href="https://wwz.lanzouf.com/iqud50ebl06d" target="_blank" rel="noopener noreferrer">Aria2 启动器</a>，然后将其解压到 Aria2 运行目录，例如 <code>D:\Aria2</code>。Aria2 启动器提供了两种方式，只需选择其中一种即可。</p>
<ul>
<li><strong>AriaNg 启动器</strong>（推荐）：使用 AriaNg 本地版作为下载管理界面。在使用该启动器前，需将 <a href="https://github.com/mayswind/AriaNg-DailyBuild/archive/master.zip" target="_blank" rel="noopener noreferrer">AriaNg</a> 解压到 Aria2 目录下，并将文件夹名改为 AriaNg，然后打开文件 index.html，该文件位于 <code>Aria2\AriaNg\index.html</code>。</li>
<li><strong>Aria2c 启动器</strong>：将 <code>https://aria2c.com</code> 作为默认下载界面。该设置较旧，需确保 JSON-RPC Path 为 <code>http://localhost:6800/jsonrpc</code>。</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/30666881" target="_blank" rel="noopener noreferrer">Aria2 基础上手指南</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p><a href="https://www.appinn.com/aria2-in-windows-setup/" target="_blank" rel="noopener noreferrer">aria2 懒人安装教程</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote3" class="footnote-item"><p><a href="http://www.senra.me/solutions-to-aria2-bt-metalink-download-slowly/" target="_blank" rel="noopener noreferrer">解决 Aria2 BT 下载速度慢没速度的问题</a> <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>小狼毫 3 分钟入门及进阶指南</title>
      <link>https://newzone.top/posts/2020-11-27-rime_input.html</link>
      <guid>https://newzone.top/posts/2020-11-27-rime_input.html</guid>
      <source url="https://newzone.top/rss.xml">小狼毫 3 分钟入门及进阶指南</source>
      <description>常年使用搜狗输入法，备份时发现搜狗词库高达 27 万条，其中 99% 的内容是垃圾词条，即使偶尔输入过一次的内容也被输入法记录。更可怕的是，词库无法从云端删除，只要你输入过一次，搜狗就永远记住了。这哪里是输入法，根本是个键盘记录器。 之后，我尝试了各种输入法：百度、讯飞、手心等依旧是键盘记录器；影子输入法开源但不稳定；谷歌拼音停止更新；微软拼音词库收录慢且难以转移；只有小狼毫开源、稳定，而且又能多设备同步词库。 Rime 小狼毫输入法下载：官方渠道，国内搬运。</description>
      <category>工具</category>
      <pubDate>Fri, 27 Nov 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>常年使用搜狗输入法，备份时发现搜狗词库高达 27 万条，其中 99% 的内容是垃圾词条，即使偶尔输入过一次的内容也被输入法记录。更可怕的是，词库无法从云端删除，只要你输入过一次，搜狗就永远记住了。这哪里是输入法，根本是个<strong>键盘记录器</strong>。</p>
<p>之后，我尝试了各种输入法：百度、讯飞、手心等依旧是键盘记录器；影子输入法开源但不稳定；谷歌拼音停止更新；微软拼音词库收录慢且难以转移；只有小狼毫开源、稳定，而且又能多设备同步词库。</p>
<p>Rime 小狼毫输入法下载：<a href="https://github.com/rime/weasel/releases/download/0.15.0/weasel-0.15.0.0-installer.exe" target="_blank" rel="noopener noreferrer">官方渠道</a>，<a href="https://wwva.lanzoum.com/iTAcP0ynxmfi" target="_blank" rel="noopener noreferrer">国内搬运</a>。</p>
<h2> 基础设置</h2>
<p>安装小狼毫时，不要修改用户文件夹位置，否则后续输入法定制容易出错。安装完成后，右键单击任务栏的小狼毫图标，点击「输入法设定」，勾选输入法（推荐「朙月拼音·简化字」），点击「中」，选择皮肤后即可使用小狼毫输入法。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><a class="footnote-anchor" id="footnote-ref1"><sup class="footnote-ref"></sup></a><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></p><a class="footnote-anchor" id="footnote-ref2">
</a><p><a class="footnote-anchor" id="footnote-ref2">小狼毫不推荐使用</a><a href="https://github.com/fkxxyz/rime-cloverpinyin" target="_blank" rel="noopener noreferrer">四叶草</a>等集成方案，建议参考 <a href="https://github.com/ssnhd/rime" target="_blank" rel="noopener noreferrer">Squirrel 鼠须管配置</a>和<a href="https://blog.csdn.net/qq_42204675/article/details/86422450" target="_blank" rel="noopener noreferrer">小狼毫 [rime_win][眀月拼音] 简单配置方法</a> 以「朙月拼音·简化字」为基础定制自己的输入法，最大限度提升输入法效率。小狼毫的魅力在于可自定义，让输入法按你的想法输出，定制流程参考下面的进阶指南。</p>
<h2> 扩充词库</h2>
<p>扩充词库包含英文联想、网络流行语、成语、俗语等，能提高输出效率。热门词库有 <a href="https://github.com/Chernfalin/better-rime-dict" target="_blank" rel="noopener noreferrer">BetterRime 词库</a>、<a href="https://github.com/Chernfalin/SuperRimeDict" target="_blank" rel="noopener noreferrer">SuperRime 拓展词库</a>、<a href="https://gist.github.com/lotem/5440677" target="_blank" rel="noopener noreferrer">自定义短语</a>和 <a href="https://github.com/rime-aca/dictionaries" target="_blank" rel="noopener noreferrer">Rime 擴充詞庫</a>。</p>
<p>从容量上来说，SuperRime 词库 &gt; BetterRime 词库 &gt; Rime 擴充詞庫，但词库越大错误收录也越多，建议按实际需求选择词库。</p>
<p>词库解压后，修改 <code>luna_pinyin.extended.dict.yaml</code>，选择词库范围。<code>mysymbols.yaml</code> 对全角和半角符号都做了优化，有其他需求可以自行修改。</p>
<h2> 双拼方案</h2>
<p>为了提高输出效率，我使用的是小鹤双拼方案。<a href="https://github.com/rime/rime-double-pinyin" target="_blank" rel="noopener noreferrer">小狼毫官方配置库</a>收录了自然码双拼、智能 ABC 双拼、小鹤双拼、MSPY 双拼和拼音加加双拼。</p>
<p>配置时，将官方配置库中的 <a href="https://github.com/rime/rime-double-pinyin/blob/master/double_pinyin_flypy.schema.yaml" target="_blank" rel="noopener noreferrer">double_pinyin_flypy.schema.yaml</a> 下载到小狼毫的用户文件夹。然后，右键单击任务栏小狼毫图标，选「输入法设定」，只勾选一个「小鹤双拼」。默认方案为繁体，可使用按键 F5 (部分版本是 F4)，将配置默认为简体。如果你不想翻页找字，可以参考由 @functoreality 提供的<a href="https://github.com/functoreality/rime-flypy-zrmfast" target="_blank" rel="noopener noreferrer">双拼加辅助码方案</a>。</p>
<p>双拼的自定义短语可参考<a href="https://blog.csdn.net/neninee/article/details/83692270" target="_blank" rel="noopener noreferrer">小狼毫自定义短语-Rime-双拼</a>。如果设定后无法使用简体输入，可将 <code>double_pinyin_flypy.schema.yaml</code> 中的 filters 模块剪贴到 translators 模块上方。</p>
<p>双拼不会显示当前输出字母，可参考<a href="https://github.com/rime/rime-double-pinyin/issues/6#issuecomment-754367706" target="_blank" rel="noopener noreferrer">使用双拼时如何同时显示按下的键以及双拼对应的拼音</a>。在 double_pinyin_flypy.schema.yaml 文件中，找到下方的代码行，然后换行加入 <code>- 'xform/^(.*)$/\U$1\E\t | $1/'</code>。这是同时显示拼音的核心代码，配置后的双拼会显示为 <code>{原始输出}|{对应拼音}</code>。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 进阶指南</h2>
<p>在进阶前，需要进入小狼毫的默认用户文档位置，新建 YAML 文档来存储输入法设置修改。如果使用「朙月拼音·简化字」输入法方案，则新建「luna_pinyin_simp.custom.yaml」。<code>%APPDATA%\Rime</code> 是小狼毫默认的用户文档位置。如果安装时修改了用户文档位置，右键单击任务栏小狼毫图标，选择「用户文件夹」，即可进入用户文档。<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><a class="footnote-anchor" id="footnote-ref3">
</a><p><a class="footnote-anchor" id="footnote-ref3">Rime 的官方文档非常详细，涵盖几乎所有的进阶需求，比如</a><a href="https://github.com/rime/home/wiki/CustomizationGuide" target="_blank" rel="noopener noreferrer">定制指南</a>、<a href="https://github.com/rime/home/wiki/RimeWithSchemata#rime-%E4%B8%AD%E7%9A%84%E6%95%B8%E6%93%9A%E6%96%87%E4%BB%B6%E5%88%86%E4%BD%88%E5%8F%8A%E4%BD%9C%E7%94%A8" target="_blank" rel="noopener noreferrer">文件配置说明</a>、<a href="https://github.com/rime/rime-emoji" target="_blank" rel="noopener noreferrer">emoji 集成</a> 和 <a href="https://github.com/rime/home/wiki/CustomizationGuide#%E6%A8%A1%E7%B3%8A%E9%9F%B3" target="_blank" rel="noopener noreferrer">模糊音设置</a>。</p>
<p>如果要在多个设备上<a href="https://github.com/rime/home/wiki/UserGuide#%E5%90%8C%E6%AD%A5%E7%94%A8%E6%88%B6%E8%B3%87%E6%96%99" target="_blank" rel="noopener noreferrer">同步用户资料</a>，请打开用户文件夹中的 <code>installation.yaml</code>，将其中的设备名称 <code>installation_id</code> 从长字符串修改为方便识别的名称，并在 <code>installation.yaml</code> 文本末尾添加用户资料同步位置 <code>sync_dir: 'D:\Sync\RIME'</code>，路径中不能出现中文。</p>
<p>打字习惯会保存在 <code>&lt;词典名&gt;.userdb.txt</code> 或 <code>&lt;词典名&gt;.userdb.kct.snapshot</code> 中。要还原个人输入习惯，则点击「用户词典管理」&gt;「导入文本码表」来恢复词频记录。</p>
<p>小狼毫主版本更新频率较低，可以用 rime 核心库 <a href="https://github.com/rime/librime/releases" target="_blank" rel="noopener noreferrer">librime</a> 替换小狼毫程序文件夹中的 rime.dll 来更新输入法。如果输入法中使用了 <code>Rime.lua</code> 的动态输出功能，可能会与核心库发生冲突，不要更换 rime.dll。</p>
<h3> 繁体字修正</h3>
<p>繁体的异体字较多，比如 <code>什麼 甚麼</code>，建议用 <a href="https://github.com/Sleeplest/texts/blob/master/dzing_variants.txt" target="_blank" rel="noopener noreferrer">dzing_variants.txt</a> 来替换。</p>
<p>替换方案参考：<a href="https://github.com/rime-aca/customize" target="_blank" rel="noopener noreferrer">https://github.com/rime-aca/customize</a></p>
<ol>
<li>将 <code>dzing.ini</code> 與 <code>dzing_variants.txt</code> 放入程序文件夾内，比如 <code>C:\Program Files (x86)\Rime\weasel-0.15.0\data\opencc</code>。</li>
<li>修改用户文件夹（即 <code>%appdata%\rime</code>）中的方案</li>
</ol>
<p>其他解读：<a href="https://github.com/imfuxiao/Hamster/issues/72" target="_blank" rel="noopener noreferrer">https://github.com/imfuxiao/Hamster/issues/72</a></p>
<h2> 常见问题</h2>
<h3> 开机后不能输出中文</h3>
<p>有时开机后，不能正常输出中文，这是由于 <code>WeaselServer.exe</code> 未正常启动的原因。</p>
<p>此时，我们可以打开程序文件夹中的 <code>WeaselServer.exe</code> 来解决问题。该程序默认位置为 <code>C:\Program Files (x86)\Rime\weasel-0.14.3\WeaselServer.exe</code>。不要将 <code>WeaselServer.exe</code> 放入开启启动程序，会导致程序报错。</p>
<p>如果不想手动启动 <code>WeaselServer.exe</code>，可以使用 <a href="https://github.com/rockbenben/rime-WeaselServer" target="_blank" rel="noopener noreferrer">WeaselServerAutostart</a> 脚本工具。首先把脚本放置于小狼毫「程序文件夹」内，然后将脚本的快捷方式移动至开机启动目录 <code>%AppData%\Microsoft\Windows\Start Menu\Programs\Startup</code>。当开机时，如果检测到小狼毫未正常启动，脚本会自动启动对应程序。WeaselServerAutostart 脚本国内下载：<a href="https://wwx.lanzoux.com/if3znkka01g" target="_blank" rel="noopener noreferrer">https://wwx.lanzoux.com/if3znkka01g</a>。</p>
<h3> 输入法报错</h3>
<p>将用户文件夹设置为同步文件夹后，出现提示「有错误，请查看日志%TEMP%\rime.weasel.*.INFO」。这是由于用户文件夹设置为同步文件夹后导致的进程冲突。日志中有提示「另一个程序正在使用此文件，进程无法访问」。</p>
<p>遇到报错后，关闭任务管理器中的 <code>WeaselServer.exe</code> 进程，然后重新执行小狼毫算法服务。</p>
<h3> 切换输入法状态</h3>
<p>小狼毫只支持按键切换中英文，支持的按键是 Caps_Lock, Shift_L, Shift_R, Control_L, control_R，配置参考<a href="https://gist.github.com/lotem/2981316" target="_blank" rel="noopener noreferrer">使用 Control 鍵切換中西文</a>，修改 default.custom.yaml。</p>
<p>虽然小狼毫不能组合键切换，但可以使用 Windows 键盘切换设置组合键。设置中选择「时间和语言」&gt;「输入」&gt;「高级键盘设置」&gt;「语言栏选项」&gt;「高级键设置」，Ctrl+Space 是 Windows 默认的中文输入法/非输入法切换的快捷键。</p>
<h3> 输入法候选框闪烁</h3>
<p>中文输入法的候选框闪烁，无法显示候选词。排除键盘硬件问题，可以尝试拔除或更换键盘，以确认问题是否复现。Word 2016 下候选框闪烁可以参考 <a href="https://github.com/rime/weasel/issues/228" target="_blank" rel="noopener noreferrer">issue 228</a>。</p>
<h3> 删除错误「上屏」的词</h3>
<p>有时打错几次的字会出现在预选词的前排，影响了输入法的习惯词典。要删除这些错误的「上屏」词，只需将选字光标移到错词上，然后按下 Shift+Delete 或 Control+Delete 即可。</p>
<h3> 符号直接上屏</h3>
<p>小狼毫给字符提供了多个候选，比如 / 默认有 <code>"、", "/", "／", "÷"</code> 四个候选词。若要按 / 键直接输出「、」，则按下方代码修改 luna_pinyin.schema.yaml 中的 punctuator 区块。<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><a class="footnote-anchor" id="footnote-ref4">
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></a><h3><a class="footnote-anchor" id="footnote-ref4"></a> 指定程序中默认输入法</h3>
<p>如果想在特定程序中默认使用英文输入法，可以在 <code>.\weasel.custom.yaml</code> 中加入下列代码。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 不能输出 emoji</h3>
<p>根据官方文档的教程设置了 emoji，但无法输出符号。经过多种方案的测试，目前输出特殊字符最稳定的是 <a href="https://github.com/ssnhd/rime" target="_blank" rel="noopener noreferrer">Squirrel 鼠须管配置</a>，Windows 用户可以参考它来调整自己的输入法。</p>
<h3> 无法触发词库的特殊符号</h3>
<p>SuperRime 词库自带的标点及特殊表情设置有问题，需要在输入法设置文件夹 <code>luna_pinyin_simp.custom.yaml</code> 中植入触发标点及特殊表情的代码。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="footnote1" class="footnote-item"><p><a href="https://www.jianshu.com/p/296bba666604" target="_blank" rel="noopener noreferrer">30 分钟搞定 自由输入法 RIME 简明配置指南</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote2" class="footnote-item"><p><a href="https://www.jianshu.com/p/cffc0ea094a7" target="_blank" rel="noopener noreferrer">Rime 输入法—鼠须管 (Squirrel) 词库添加及配置</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote3" class="footnote-item"><p><a href="https://www.dazhuanlan.com/2019/10/06/5d995d43e4432/" target="_blank" rel="noopener noreferrer">小狼毫 RIME 输入法配置</a> <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="footnote4" class="footnote-item"><p><a href="https://github.com/rime/home/wiki/CustomizationGuide#%E4%B8%80%E4%BE%8B%E5%AE%9A%E8%A3%BD%E6%A8%99%E9%BB%9E%E7%AC%A6%E8%99%9F" target="_blank" rel="noopener noreferrer">一例、定製標點符號</a> <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>RSS 完结篇：节省千元服务费，RSSHub、Huginn 转移 NAS</title>
      <link>https://newzone.top/posts/2021-10-23-nas_with_rsshub_and_huginn.html</link>
      <guid>https://newzone.top/posts/2021-10-23-nas_with_rsshub_and_huginn.html</guid>
      <source url="https://newzone.top/rss.xml">RSS 完结篇：节省千元服务费，RSSHub、Huginn 转移 NAS</source>
      <description>作为一个重度 RSS 用户，我获取的 90% 的新闻和信息都来自于 RSS 源。我使用 RSSHub 来生成主流媒体的 RSS，使用 Huginn 来定制个性化的 RSS，同时使用 TinyTinyRSS 来过滤并阅读 RSS。这些服务帮助我将阅读时间从原来的 3 个小时减少到 1 个小时。 这些服务最初托管在一台配置较低的 1 核 1G 服务器上。然而，由于配置过低，服务器频繁重启，维护成本不断上升。后来，我尝试了一些配置较高的国外服务器，例如 2 核 4G 低端服务器，但遇到了严重的超售和性能不稳定的问题。总的来说，购买国外的低端服务器（特别是俄罗斯服务器）就是把钱扔进水里。</description>
      <category>自动化</category>
      <pubDate>Sat, 23 Oct 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作为一个重度 RSS 用户，我获取的 90% 的新闻和信息都来自于 RSS 源。我使用 RSSHub 来生成主流媒体的 RSS，使用 Huginn 来定制个性化的 RSS，同时使用 TinyTinyRSS 来过滤并阅读 RSS。这些服务帮助我将阅读时间<strong>从原来的 3 个小时减少到 1 个小时</strong>。</p>
<p>这些服务最初托管在一台配置较低的 1 核 1G 服务器上。然而，由于配置过低，服务器频繁重启，维护成本不断上升。后来，我尝试了一些配置较高的国外服务器，例如 2 核 4G 低端服务器，但遇到了严重的超售和性能不稳定的问题。总的来说，购买国外的低端服务器（特别是<strong>俄罗斯服务器</strong>）就是把钱扔进水里。</p>
<p>因此，相较于升级高配服务器或者使用不靠谱的国外 VPS，NAS 成为了一个高性价比的选择。当然，这也面临着许多问题，我们需要一步步地去解决。</p>
<h2> 事前准备</h2>
<ul>
<li>NAS</li>
<li>域名 (子域名既可)</li>
<li>带动态 DNS 的路由器 (推荐 openwrt 软路由)</li>
</ul>
<h2> Docker 镜像安装</h2>
<ol>
<li>
<p>NAS 管理后台 &gt; 套件中心 &gt; 搜索并安装「Docker」，随后在 Docker 容器中安装所需服务。</p>
</li>
<li>
<p>在 Docker 注册表中搜索对应的镜像，选中有最多星的项目，然后点击下载。</p>
<figure><img src="https://img.newzone.top/2022-05-05-14-40-43.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
<li>
<p>镜像下载完成后，进入「映像」，选中刚下载好的镜像，点击启动。</p>
<figure><img src="https://img.newzone.top/2022-05-05-14-41-01.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
<li>
<p>在高级设置中的端口设置，将本地端口从自动改为一个固定的端口，这样以后就可以方便地进行端口映射，避免 NAS 重启后本地端口发生变化。</p>
<figure><img src="https://img.newzone.top/2022-05-05-14-41-15.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ol>
<h2> 域名绑定</h2>
<ol>
<li>
<p><strong>关闭光猫路由</strong>：通过电话联系宽带运营商，要求关闭光猫的路由功能。对于那些默认不提供公网 IP 的运营商，也可以在这个环节让运营商给你分配一个公网 IP。如果碰到死板的客服，找你要开通理由，不要正面回答。</p>
</li>
<li>
<p>家用宽带通常使用动态 IP，且无法提供对外的 80 接口。可以使用动态 DNS 插件来实现域名与家庭宽带 IP 的实时绑定，以达到固定链接打开 NAS 服务的效果。</p>
</li>
<li>
<p><strong>动态 DNS(DDNS) 设置</strong>，以下以 OpenWrt+Cloudflare 为例。</p>
<ul>
<li>Cloudflare 动态 DNS 配置 (<a href="https://p3terx.com/archives/openwrt-cloudflare-ddns.html" target="_blank" rel="noopener noreferrer">教程</a>)：进入系统 - 软件包，搜索「cloudflare」，安装 <code>ddns-scripts_cloudflare.com-v4</code>，然后重启路由器。</li>
<li>进入服务 - 动态 DNS，Cloudflare 登录密码为 <a href="https://dash.cloudflare.com/profile/api-tokens" target="_blank" rel="noopener noreferrer">Cloudflare API</a> 中的 Global API Key。如果你的域名托管在阿里云上，可以在 <a href="https://ram.console.aliyun.com/users" target="_blank" rel="noopener noreferrer">RAM 访问控制</a> 中创建拥有 AliyunDNSFullAccess 权限的 AccessKey。动态 DNS 的用户名和密码分别可以使用 AccessKey ID 和 AccessKey Secret。</li>
</ul>
<figure><img src="https://img.newzone.top/2022-05-05-14-41-31.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ol>
<p>如果你使用的是内网宽带，无法提供公网 IP，可以使用花生壳等内网穿透工具来达到类似的效果。</p>
<h2> RSS 转码</h2>
<p>由于国内运营商禁用了家庭宽带的 80 和 443 端口，使得无法隐藏 NAS 服务端口，只能采用 <code>home.xxx.com:34567</code> 这样的链接。同时，绝大多数主流 RSS 阅读器都无法支持带有端口号的 RSS 源配置，即便通过 DNS 设置域名隐式跳转，端口链接依然会被识别。这一问题使得部署在 NAS 上的 RSS 源无法直接被读取。例如，在使用 Tiny Tiny RSS 订阅 NAS 的 RSS 源时，常会出现报错，无法准确读取带有端口或 HTTPS 的 RSS 源。</p>
<p>为了顺利读取 NAS 的 RSS 源内容，我使用 PHP 制作了一个转录链接 <code>https://rss.aishort.top/?type=yyy</code>。该 PHP 文件整合了所有 RSS 源，并通过链接参数进行区分。通过 PHP 将 NAS 上的 Huginn 和 RSSHub 的 RSS 内容聚合到服务器，PHP 根据链接参数获取并输出对应的 XML，从而实现与各类阅读器的兼容。而且 PHP 具有私密性，不会泄漏 NAS 域名和端口；输出链接可替换，方便后续更新维护。</p>
<p>虽然需要在另一台服务器上部署 PHP 转录，但与购买用于抓取 RSS 所需的高配服务器相比，这一方案的性价比更高。如果你已有服务器，可按照我的方式直接部署。</p>
<div class="language-php line-numbers-mode" data-ext="php"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你没有服务器或不愿意再折腾，也可以尝试其他的 RSS 阅读器。例如，The Old Reader 支持使用带有端口的 RSS 源。</p>
<h2> 总结</h2>
<p>使用 NAS 替代服务器后，Huginn 不再定期崩溃，抓取也不再卡壳，也不需要总惦记给服务器续费。硬件配置也从 1 核 1G 跃升到 4 核 8G。这套流程跑了一年，基本上没有出现什么问题，可以放心使用。</p>
<p>这篇文章也是 RSS 系列的完结篇。从 2017 年 4 月的《RSS 入门篇：FEED43&amp;FeedEx-为静态网页定制 RSS 源》开始，零零散散地写了 4 年半，终于把坑都填起来了。</p>
<p>RSS 系列的初衷是为了减少算法推送泛滥而造成的信息过载。来自 Google 的分析师 Gary Illyes 曾表示：「互联网上大约 60% 的内容是重复的。」比如你搜索一项内容，打开前 10 个网页，可能内容完全一样。</p>
<p>RSS (Really Simple Syndication) 的中文含义是「简易信息聚合」，能按你个人所需定制信息聚合，让你脱离算法的掌控，把时间花在你真正需要的信息上。而 RSS 这个对抗信息过载的极佳工具却从 Google Reader 退役后，被很多人认为已经衰弱消亡。实际上 RSS 只是从主流社会中退出，变为少数人的高效信息获取方式。</p>
<p>RSS 定制的系列文章原本只是记录个人心得，我没想到文章发布后收到很多人的支持，才发觉并不是 RSS 在没落，而是缺少布道者。多数人希望了解 RSS，但之前的教程门槛较高，大厂如 Google 也关闭了 RSS 项目，导致新手入门变得更加困难。因此，我持续简化 RSS 教程，希望能让大家更轻松入门 RSS。如果你也对 RSS 感兴趣，希望把你遇到的疑问和所得都记录下来，帮助越来越多的人了解 RSS，掌握这项高效的信息获取方式。</p>
<p>我坚信 <strong>RSS 是最适合普通人的信息获取方式</strong>。这可能有些反潮流，但我内心对此深信不疑，也希望越来越多的人能认识到 RSS，开始使用这项只被少数人使用的高效信息获取方式。</p>
<h2> RSS 合集</h2>
<p>汇总的 RSS 永久订阅源都是通过 RSSHub 和 Huginn 制作的。如果你有兴趣自己制作 RSS，可以参考以下教程。</p>
<ul>
<li>
<p><a href="https://newzone.top/posts/2017-04-22-rss_feed43_feedex.html" target="_blank" rel="noopener noreferrer">RSS 入门篇：FEED43&amp;FeedEx-为静态网页定制 RSS 源</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2018-10-07-huginn_scraping_any_website.html" target="_blank" rel="noopener noreferrer">RSS 进阶篇：Huginn - 真·为任意网页定制 RSS 源（PhantomJs 抓取）</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2019-04-01-rsshub_noob.html" target="_blank" rel="noopener noreferrer">RSS 速成篇：RSSHub 捡现成的轮子</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2020-03-25-rsshub_on_vps.html" target="_blank" rel="noopener noreferrer">RSS 速成篇 2：RSSHub 自部署</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2021-10-23-nas_with_rsshub_and_huginn.html" target="_blank" rel="noopener noreferrer">RSS 完结篇：节省千元服务费，RSSHub、Huginn 转移 NAS</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2022-03-17-rss_persistent_link_collection.html" target="_blank" rel="noopener noreferrer">RSS 汇总篇：RSS 永久链接合集，拒绝 RSS 失效</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/2022-05-05-14-40-43.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>RSS 汇总篇：RSS 永久链接合集，拒绝 RSS 失效</title>
      <link>https://newzone.top/posts/2022-03-17-rss_persistent_link_collection.html</link>
      <guid>https://newzone.top/posts/2022-03-17-rss_persistent_link_collection.html</guid>
      <source url="https://newzone.top/rss.xml">RSS 汇总篇：RSS 永久链接合集，拒绝 RSS 失效</source>
      <description>越来越多的网站不再提供 RSS feed，这使得我们难以便捷地获取信息。为了避免这一情况的恶化，我选择了自制 RSS，并将它们输出为永久链接，以保持内容的有效性。本文链接均为自用 RSS，链接长期有效，可放心使用。 如果有兴趣自己制作 RSS，可查看文章底部教程。 每日热点 整理实时新闻热点，采集来自搜索引擎、微信文章、应急通知的资讯。 百度实时热点：https://rss.aishort.top/?type=baidu 实时收录百度热搜内容，并显示热搜指数和简介。 国内应急新闻：https://rss.aishort.top/?type=cneb 采集自国家应急广播，配合 rss 阅读器过滤，及时获取当地应急通知。 瓦斯阅读：https://rss.aishort.top/?type=wasi 通过瓦斯阅读，获取当天最热门的微信文章。微信图片不支持第三方显示，因此 RSS 阅读器内只显示文字内容，点击文章链接后，可阅读完整公众号文章。</description>
      <category>自动化</category>
      <pubDate>Thu, 17 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>越来越多的网站不再提供 RSS feed，这使得我们难以便捷地获取信息。为了避免这一情况的恶化，我选择了自制 RSS，并将它们输出为永久链接，以保持内容的有效性。本文链接均为自用 RSS，链接长期有效，可放心使用。</p>
<p>如果有兴趣自己制作 RSS，可查看文章底部教程。</p>
<h2> 每日热点</h2>
<p>整理实时新闻热点，采集来自搜索引擎、微信文章、应急通知的资讯。</p>
<ul>
<li>
<p><strong>百度实时热点</strong>：<code>https://rss.aishort.top/?type=baidu</code>
实时收录百度热搜内容，并显示热搜指数和简介。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-21-49.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
<li>
<p><strong>国内应急新闻</strong>：<code>https://rss.aishort.top/?type=cneb</code>
采集自<a href="http://www.cneb.gov.cn/guoneinews/" target="_blank" rel="noopener noreferrer">国家应急广播</a>，配合 rss 阅读器过滤，及时获取当地应急通知。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-22-08.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
<li>
<p><strong>瓦斯阅读</strong>：<code>https://rss.aishort.top/?type=wasi</code>
通过瓦斯阅读，获取当天最热门的微信文章。微信图片不支持第三方显示，因此 RSS 阅读器内只显示文字内容，点击文章链接后，可阅读完整公众号文章。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-22-32.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</li>
</ul>
<h2> 互联网资讯</h2>
<p>整合互联网资讯媒体，偏重于前端科技、电子硬件、手机应用。</p>
<ul>
<li>
<p><strong>36kr</strong>：<code>https://rss.aishort.top/?type=36kr</code></p>
</li>
<li>
<p><strong>虎嗅网</strong>：<code>https://rss.aishort.top/?type=huxiu</code></p>
</li>
<li>
<p><strong>艾瑞网</strong>：<code>https://rss.aishort.top/?type=iresearch</code></p>
</li>
<li>
<p><strong>爱范儿|AppSolution</strong>：<code>https://rss.aishort.top/?type=AppSolution</code></p>
</li>
</ul>
<h2> 奇思妙想</h2>
<p>每天吸收些稀奇古怪的知识，期待引发后续的灵机一动。</p>
<ul>
<li>
<p><strong>果壳网</strong>：<code>https://rss.aishort.top/?type=guokr</code></p>
</li>
<li>
<p><strong>知乎想法热榜</strong>：<code>https://rss.aishort.top/?type=zhihu</code></p>
</li>
</ul>
<h2> 教程：自制 RSS</h2>
<p>以上提供的 RSS 链接都是使用 RSSHub 和 Huginn 制作的。如果你也想制作 RSS，可以参考以下教程：</p>
<ul>
<li>
<p><a href="https://newzone.top/posts/2017-04-22-rss_feed43_feedex.html" target="_blank" rel="noopener noreferrer">RSS 入门篇：FEED43&amp;FeedEx-为静态网页定制 RSS 源</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2018-10-07-huginn_scraping_any_website.html" target="_blank" rel="noopener noreferrer">RSS 进阶篇：Huginn - 真·为任意网页定制 RSS 源（PhantomJs 抓取）</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2019-04-01-rsshub_noob.html" target="_blank" rel="noopener noreferrer">RSS 速成篇：RSSHub 捡现成的轮子</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2020-03-25-rsshub_on_vps.html" target="_blank" rel="noopener noreferrer">RSS 速成篇 2：RSSHub 自部署</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2021-10-23-nas_with_rsshub_and_huginn.html" target="_blank" rel="noopener noreferrer">RSS 完结篇：节省千元服务费，RSSHub、Huginn 转移 NAS</a></p>
</li>
<li>
<p><a href="https://newzone.top/posts/2022-03-17-rss_persistent_link_collection.html" target="_blank" rel="noopener noreferrer">RSS 汇总篇：RSS 永久链接合集，拒绝 RSS 失效</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/2022-05-05-17-21-49.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>一键安装 99 个程序，Windows 最强软件管理器</title>
      <link>https://newzone.top/posts/2022-03-21-winget_the_strongest_software_manager_for_windows.html</link>
      <guid>https://newzone.top/posts/2022-03-21-winget_the_strongest_software_manager_for_windows.html</guid>
      <source url="https://newzone.top/rss.xml">一键安装 99 个程序，Windows 最强软件管理器</source>
      <description>矿难、Win11、DDR5、40 显卡接踵而至，电脑更换的高峰期即将来临。可惜我的生产力工具等不了了，不得不 49 年入国军，隔离期间装配上 i7+3080Ti 主机。硬件配置完毕后，软件安装成为新的挑战。我常用的软件超过 60 个，以往需要逐一访问官网下载最新版本并单独安装，这既耗时又费力。 我尝试过国内的软件管理器，它们支持批量下载，但安装和设置仍需逐个进行。此外，把软件系统的管理交给 360、金山或腾讯，你真的放心？相比之下，Windows 原生程序管理工具 winget 和 WebGUI winstall 使用更简单，它们直接从官方来源下载应用，并支持一键批量静默安装，是快速部署程序的理想选择。</description>
      <category>系统</category>
      <pubDate>Mon, 21 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>矿难、Win11、DDR5、40 显卡接踵而至，电脑更换的高峰期即将来临。可惜我的生产力工具等不了了，不得不 49 年入国军，隔离期间装配上 i7+3080Ti 主机。硬件配置完毕后，软件安装成为新的挑战。我常用的软件超过 60 个，以往需要逐一访问官网下载最新版本并单独安装，这既耗时又费力。</p>
<p>我尝试过国内的软件管理器，它们支持批量下载，但安装和设置仍需逐个进行。此外，把软件系统的管理交给 360、金山或腾讯，你真的放心？相比之下，Windows 原生程序管理工具 winget 和 WebGUI winstall 使用更简单，<strong>它们直接从官方来源下载应用，并支持一键批量静默安装，是快速部署程序的理想选择</strong>。</p>
<h2> 原生程序管理-winget</h2>
<p><a href="https://docs.microsoft.com/zh-cn/windows/package-manager/winget/" target="_blank" rel="noopener noreferrer">winget</a> 是 Windows 的命令行程序包管理器。在 Windows 10 和 Windows 11 上，可以用 winget 来发现、安装、升级、删除和配置应用程序。早期版本的 Windows 不支持 winget，需要在 <a href="https://github.com/microsoft/winget-cli/releases" target="_blank" rel="noopener noreferrer">winget 官方网站</a> 下载以 <code>.msixbundle</code> 为后缀的安装程序。而在 Win11 上，则可 <a href="https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab" target="_blank" rel="noopener noreferrer">通过 Microsoft Store 获取应用安装程序</a>。</p>
<p>安装应用安装程序后，可在命令提示符 (cmd) 中输入「winget」来运行程序命令。若要使用 PowerShell 命令，请注意修改 PowerShell 的执行策略。重要的是更改 ps1 文件的运行权限，而非 win11 自带的 ps5。以管理员权限运行 PowerShell，执行 <code>Set-ExecutionPolicy RemoteSigned</code> 命令。</p>
<h3> winget install appName</h3>
<p>执行 winget install 命令，就能完成指定程序的下载、哈希验证、静默设置安装三个步骤，不需要人工干预。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-13-24.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> winget search appName</h3>
<p>当未找到或不确定 appName 时，使用 winget search 可以锁定程序名称。以「飞书」为例，飞书不支持中文锁定，搜索后发现有国内版「Feishu」和海外版「Lark」两个版本，国内版使用命令 <code>winget install feishu</code>。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-13-45.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> winget upgrade --all</h3>
<ul>
<li><code>winget upgrade</code> 列出所有支持 winget 升级的程序，然后使用 <code>winget upgrade ID</code> 升级指定程序。</li>
<li><code>winget upgrade --all</code> 会静默升级所有支持 winget 的程序，适合更新强迫症患者。不过，该升级流程暂时没有筛选办法，无法单独剔除应用。</li>
<li><code>winget upgrade --all --include-unknown</code> 升级包括未知版本在内的所有应用，一般用不到，适用于强迫症患者。</li>
</ul>
<figure><img src="https://img.newzone.top/2022-05-05-17-14-00.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> Microsoft Store 应用</h3>
<p>Microsoft Store 不支持 winget 官方源，因此 winget 不能使用应用名称安装商店应用。</p>
<p>winget 安装 Microsoft Store 应用前，需要 <code>winget search</code> 命令找到应用 id 和来源。msstore 源指 Miscrosoft Store，其使用唯一标识符作为程序包的“Id”。因此，snipaste 安装命令为 <code>winget install 9P1WXPKB68KX -s msstore</code>。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-14-23.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>安装中会要求接受协议，点 <code>Y</code> 确认即可。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-14-35.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 批量部署程序-winstall</h2>
<p><a href="https://winstall.app/" target="_blank" rel="noopener noreferrer">winstall</a> 是 winget install 的网页管理工具。借助 winstall，用户不懂代码，也能轻松使用 winget，一次性安装所有应用程序。</p>
<p>操作非常简单，winstall 页面选中程序，即可打包程序组或生成批量安装命令。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-14-50.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>winstall 的应用搜索继承了 winget 的问题，部分国产软件不支持中文搜索，比如「坚果云」只支持英文名称「Nutstore」。希望这一问题，可以随着国内用户群增多而被解决。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-15-09.png?imageMogr2/format/webp" alt="winget 搜索" tabindex="0" loading="lazy"><figcaption>winget 搜索</figcaption></figure>
<figure><img src="https://img.newzone.top/2022-05-05-17-15-37.png?imageMogr2/format/webp" alt="winstall 搜索" tabindex="0" loading="lazy"><figcaption>winstall 搜索</figcaption></figure>
<p>winstall 页面选好程序后，导出自动生成的批量安装命令，并在命令提示符 (cmd) 中执行，系统将自动下载并静默配置程序。注意保存批量安装命令，winstall 网站服务并不稳定，有可能你后面想用，它却无法导出命令。</p>
<figure><img src="https://img.newzone.top/2022-05-05-17-15-55.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 常见问题</h2>
<h3> 尝试更新源失败</h3>
<p>在国内使用 winget 时，常遇到「更新源失败」的问题。下载 <a href="https://github.com/microsoft/winget-cli/releases" target="_blank" rel="noopener noreferrer">winget 最新官方包</a> 可以有效解决这一问题。</p>
<p>另一个常见问题是网络连接失败，例如出现 <code>InternetOpenUrl() failed. 0x80072f7d : unknown error</code> 的提示。这通常是因为 Internet 选项中的 TLS 版本设置过低。启用 TLS 1.2 可以解决此问题，具体操作方法请参考 <a href="https://newzone.top/posts/2022-02-19-microsoft_store_fixed.html#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">解决 Windows 应用商店（Microsoft store）无法打开的问题</a>。</p>
<h3> 下载速度慢</h3>
<p>在使用 winget 时，你可能会发现下载速度异常缓慢，例如 4M 数据需要等待十分钟。然而，这种感觉实际上是误解。慢速度通常是因为正在下载 winget 的源数据，而非软件本身。这一过程通常与网络环境无关，因此需要耐心等待。实际下载应用程序时，速度通常会快得多。</p>
<h3> 已解决问题</h3>
<p>以下问题是早起版本的 bug，新测试中都解决了。</p>
<ul>
<li>批量安装应用中，winstall 不定期出现崩溃，原因未知。</li>
<li>winget install 不能检测当前版本软件是否安装，容易造成重复安装应用，拖慢部署时间。</li>
<li>部分应用安装后容易有 bug，比如剪映有卡顿问题，手动安装后恢复正常。</li>
</ul>
<h2> 总结</h2>
<p>在我的常用软件列表中有 50 个应用支持 winget 批量静默安装，剩余 10 个需手工安装，覆盖率在 80% 以上，足够满足大部分人的需求。winget 用一个命令行能静默安装上百个软件，节省了大量装机时间。对于系统重装、批量装机、快速设置新工作环境，winget 和 winstall 是必不可少的装机神器。</p>
<p>这篇文章主要介绍了 winget 的使用原理和方法。如果想直接上手，可以查看我的 <a href="https://newzone.top/windows/NewSystem.html" target="_blank" rel="noopener noreferrer">系统重装</a> 过程记录。</p>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/2022-05-05-17-13-24.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>抛弃 Notion 知识管理软件的尝试：把博客变为知识库</title>
      <link>https://newzone.top/posts/2022-08-22-learndata_blog_to_knowledge_management.html</link>
      <guid>https://newzone.top/posts/2022-08-22-learndata_blog_to_knowledge_management.html</guid>
      <source url="https://newzone.top/rss.xml">抛弃 Notion 知识管理软件的尝试：把博客变为知识库</source>
      <description>知识管理/笔记软件越来越多，Notion、Obsidian、Logseq、Roam Research、Evernote、flomo、为知、飞书、语雀……我总在不同应用间徘徊。直到有一次，我突然醒悟：知识管理软件不是管理知识，而是管理笔记。笔记里的知识并不属于你，只有经过消化、应用，才能成为自己的知识。 这么简单的事，我之前却一直没看透，总是把笔记与知识理解划上了等号。当要用到曾摘录的笔记时，就在各类知识管理软件里翻找，折腾一番才找到需要的笔记，有时甚至出现「自己不清楚放在哪里，也不清楚是否有」的情况。记笔记花了一个小时，下次寻找与重新消化又耗费了一个小时，原本为效率而生的知识管理软件变成了时间杀手。</description>
      <category>博客</category>
      <category>头脑驿站</category>
      <pubDate>Mon, 22 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>知识管理/笔记软件越来越多，Notion、Obsidian、Logseq、Roam Research、Evernote、flomo、为知、飞书、语雀……我总在不同应用间徘徊。直到有一次，我突然醒悟：知识管理软件不是管理知识，而是管理笔记。<strong>笔记里的知识并不属于你，只有经过消化、应用，才能成为自己的知识。</strong></p>
<p>这么简单的事，我之前却一直没看透，总是把笔记与知识理解划上了等号。当要用到曾摘录的笔记时，就在各类知识管理软件里翻找，折腾一番才找到需要的笔记，有时甚至出现「自己不清楚放在哪里，也不清楚是否有」的情况。记笔记花了一个小时，下次寻找与重新消化又耗费了一个小时，原本为效率而生的知识管理软件变成了时间杀手。</p>
<p>另一方面，我们在使用知识管理软件的美观界面和强大功能的同时，也被这些软件所限制，无法完全按照自己的想法输出笔记。比如，你有了一双翅膀，<strong>Markdown 文本是自由的天地，而进入 Notion 则被隔成一个个小房间</strong>，你在房间里待着很舒服，可一旦想去其他房间，就必须脱离 block，不比 Markdown 可以自由飞翔。</p>
<figure><img src="https://img.newzone.top/2022-08-22-18-02-07.png" alt="" tabindex="0" loading="lazy"><figcaption>Markdown VS Notion</figcaption></figure>
<p>突破迷思后，我基于 VuePress 和 vuepress-theme-hope 建立了 <a href="https://github.com/rockbenben/LearnData" target="_blank" rel="noopener noreferrer">LearnData</a> 项目，将知识笔记、生活记录、博客和任何认为有价值的记录转换为 Markdown 文本，然后推送到 GitHub 生成 Pages 静态页面，并同步到国内云服务器，形成 <a href="https://newzone.top/" target="_blank" rel="noopener noreferrer">LearnData - 开源笔记</a>。</p>
<figure><img src="https://img.newzone.top/2022-08-24-19-14-59.png" alt="" tabindex="0" loading="lazy"><figcaption>笔记/博客自动化发布</figcaption></figure>
<p>LearnData 的笔记和文章格式是 Markdown，输出不受到应用的局限。LearnData 看起来像由文章组成的博客，但它的笔记是独立的知识点，是所有知识的终点站，是整理后的知识库。通过 LearnData 可以搜索和整理知识，不再需要来回翻找。把博客转为知识库后，我明显感到学习和知识使用的效率得到提高，开始摆脱「工具奴隶」和「效率中毒」陷阱。</p>
<figure><img src="https://img.newzone.top/2022-08-22-19-28-25.png" alt="" tabindex="0" loading="lazy"><figcaption>笔记 + 文章 = LearnData 知识库</figcaption></figure>
<h2> 为什么用网页管理笔记</h2>
<h3> 公开想法</h3>
<p>知识管理/笔记软件具有天然的私密性，不对外公开。但是，我的笔记大部分来自互联网，需要对谁保密？</p>
<p>我非常赞同 Ray Dalio 在《原则》中提到的「头脑极度透明，公开分享想法」。</p>
<blockquote>
<p>让其他人无比清晰地看到你在做什么、为什么这么做。头脑越透明，越不会自欺，其他人也会给你诚实的反馈。</p>
</blockquote>
<p>作为国内最早一批介绍 Aria2 的人，我曾经写过一篇 Aria2 教程。文章后来被多个网站参考/抄袭，覆盖了 Aria2 某度搜索前三页。在那篇文章的评论区，有好几条留言批评文章逻辑差看不懂的，经常有热心人帮我怼回去。其实，那篇文章的初版真的很糟糕。那篇文章是在大家的反馈下，迭代了三个版本才开始变得完整和逻辑化。这些反馈也是我坚持写博客的原动力。这跟费曼学习法的道理相通，当你写文章帮助其他人时，你也在加深自己对知识的理解。建立 LearnData 不到一个月，但我从中获取的正反馈已超过私有笔记一年的收获。笔记公开化是有百利而无一害。</p>
<h3> 输出分享</h3>
<p>其次，网页形式使笔记更容易分享。除了效率工具的心得，我还在 LearnData 上放置了生活技巧、购物评价和说明书。当家人或朋友需要帮助时，可以直接访问网页，无需安装应用程序或折腾账户分享，比如我经常分享的<a href="https://newzone.top/family/Maintenance.html#%E9%80%9A%E9%A9%AC%E6%A1%B6" target="_blank" rel="noopener noreferrer">通马桶技巧</a> 和疏通器说明书。</p>
<figure><img src="https://img.newzone.top/2022-08-19-22-52-29.png" alt="" tabindex="0" loading="lazy"><figcaption>生活知识页面样例</figcaption></figure>
<h3> 被动消化知识</h3>
<p>如果只是公开分享，LearnData 与笔记软件并无区别，它的优点更在于网页有限的笔记数量。虽然网页可以无限地存放笔记，但打开页面只能看到少量的几十篇内容。一旦笔记堆积过多，你就像触发了整理开关似的，对笔记开始消化重构。这就是网页容量上的无限性和视觉/直觉上的有限性，存储是无限但视觉上只能有很小的一块。这里的直觉指，看一眼界面就能找到所需知识点的效果。</p>
<p>比如，当我的代码区块笔记存放超过 10 篇时，每次查找代码笔记都需要 10 选 1，知识查找时间也翻倍了。我意识到节点过多，不能让自己将时间花在查询上。因此，我将代码笔记分为 Basic 和 FrontEnd 两块，总结划分的同时，编程知识也再次得到消化。</p>
<p>而网页与笔记软件的区别也正在于此，LearnData 的主页、侧边栏和导航栏就是能展示的路径，你必须不断对笔记提纯才能提高使用率。否则，如果你只是「积累」笔记而非消化知识，无论使用什么工具和方法，成效都是 0。</p>
<h3> 漂亮决定生产力</h3>
<p>另外，网页可以自由调整外观样式，更换为你喜欢的界面。这也是为什么 LearnData 放弃了初版的 docsify 框架，改为复杂得多的 VuePress 框架。docsify 的官方模板太过简单，没有界面设计模块，难以满足知识管理界面必须直观漂亮的要求，而这一点直接决定了生产力，不能让步。</p>
<p>知识管理/笔记软件将 Markdown 文件作为一个个区块，而网页可以将其视为一体。LearnData 支持多级侧边栏和目录，让阅读和查找变得更加简单。</p>
<figure><img src="https://img.newzone.top/2022-08-19-22-42-03.png" alt="" tabindex="0" loading="lazy"><figcaption>LearnData 页面布局</figcaption></figure>
<h2> 为什么不用 Obsidian</h2>
<p>@北鸮 提到「脱离 Notion 可以理解，Markdown 很自由，那为啥不用 Obsidian 呢？也有标题，也有标签，也可以有层级，开源软件还有 Logseq 替代」。</p>
<p>Obsidian 等双链笔记的设计初衷很好，可以让我们自由地在不同知识点间切换，节省搜索和关联的时间。但是，知识点的联系是靠人工打标签来建立的，而不是根据关键词自动建立图谱关系，这与 URL 链接有什么区别？因此，我认为<strong>双链笔记并不适合知识库</strong>（如果对双链笔记理解有误，欢迎纠正）。</p>
<figure><img src="https://img.newzone.top/2022-08-19-21-39-41.png?imageMogr2/thumbnail/500x" alt="" tabindex="0" loading="lazy"><figcaption>我的 Obsidian 图谱，只有右下角简悦抓取的素材有相同标签而聚作一团</figcaption></figure>
<p>建立知识点联系后，双链笔记可以轻松处理成千上万个文档，按条件整合文本，便于阅读。但是，大多数人常用的知识范围不会超过一百。如果你的个人笔记超过千篇，要么你是科研大佬，要么你没有消化这些笔记，只是在记笔记。</p>
<p>除了博客，我只有 37 篇笔记，而且按功能划分为 7 个区块。你觉得这点文件，用树状管理方便，还是用双链笔记打一堆标签来得好？即使有时标题里找不到某个关键词，我也可以用全文搜索达到目的。我个人会倾向于简单方便的树状标题管理。</p>
<h2> 抛弃知识软件 ≠ 不用</h2>
<p>选择 Markdown 就得卸载知识软件吗？</p>
<p>抛弃知识软件并不是不用，而是将其视为知识的中转站。知识软件的趋势是 ALL IN ONE，记录全能成了标榜的主打功能。但是，<strong>光收集而不应用的知识等于零</strong>，只会增加你后续的使用成本。</p>
<p>对我来说，知识软件是功能清晰的素材库。我会不断清空素材库，将小的知识点融入 LearnData 笔记区，成体系内容则写成博客，以确保 LearnData 成为知识库的终点。</p>
<figure><img src="https://img.newzone.top/2022-08-21-21-38-47.png" alt="" tabindex="0" loading="lazy"><figcaption>知识类素材库</figcaption></figure>
<ul>
<li>Logseq 将信息节点化，能按日期整合文本，因此我用它来记录笔记，并定期生成周报和月报回顾。</li>
<li>飞书文档自带侧边目录栏，对长文档优化很好，因此我用它记录工作心得，定期形成工作流程并在公司分享。</li>
<li>WonderPen 带多层级标题，当一点头绪方向都没有时，素材就可以直接放这里。</li>
<li>Notion 貌似全能，但其可替代性也最高，知识库迁移到 LearnData 后，Notion 仅用来存放涉及个人信息和不方便转移的旧文档。</li>
<li>Airtable 表格功能最强，虽然已经被其他软件赶上，但前期存储的大量数据仍然放在这里。</li>
<li>SuperMemo 与 Anki 功能类似，可以帮助定期复习需要重复记忆的知识点。</li>
</ul>
<p>而对于 Obsidian，我将其视为笔记的备份站。通过 GoodSync，LearnData 笔记发生修改后，相关更新会实时同步到 Obsidian，完成笔记的备份。期待有一天 Obsidian 完善双链功能，帮助笔记自动打上标签，到时备份笔记就能正式使用，我也能无缝切换到新的知识管理应用。</p>
<h2> 如果你也想试试……</h2>
<p>如何把博客转换为知识库，建立属于你的 LearnData 知识管理网站？</p>
<p>首先，确保你有 GitHub 账号，懂 Markdown 和基础 HTML 知识。然后，按照 <a href="https://newzone.top/#%F0%9F%94%A3-%E9%85%8D%E7%BD%AE-learndata" target="_blank" rel="noopener noreferrer">LearnData 部署教程</a>完成搭建和配置。如果你的笔记已经用 Markdown 格式编写，只需把文档放在 docs 目录下，就可以建立自己的知识库。</p>
<p>笔记结构可以参考我的分类。这没有绝对的界限，只要看到自己觉得有价值的知识点，都可以往 LearnData 里添加。但是，不要全文本地化收藏，简单提取用链接引用即可。除少量精品外，网络时代的文章隔几年就会失效，没必要收藏为一篇篇的笔记。当下次需要使用这个知识点时，再考虑整理事宜，否则，长时间用不到的知识，又有什么整理的价值呢。</p>
<ul>
<li>置顶：日常习惯、健身、阅读；</li>
<li>代码：常用代码的学习和使用笔记；</li>
<li>软件应用：常用应用、Chrome 扩展和相关教程；</li>
<li>页面开发：页面插件和框架生成工具；</li>
<li>网站部署：网站相关的工具和知识收集；</li>
<li>Linux 服务：NAS 和服务器上的后端应用，主要以 Docker 方式部署；</li>
<li>系统问题：Windows 系统优化和相关问题；</li>
<li>生活区：说明书、生活记录和小技巧；</li>
<li>博客区：聚合所有博客文章，以分类、标签、时间轴等方式进行组合。</li>
</ul>
<h2> 最后</h2>
<p>两个月前，我在 WordPress 博客篇中喊着「md2wordpress 是最后一次博客方案」，但由于 WordPress 与 Markdown 各种不兼容，写完没多久就换到支持原生 Markdown 解析的 VuePress。</p>
<p>这次我不想再立 Flag 了，只希望能放过自己。每进行一次知识迁移，真是大伤，休息一段时间吧。</p>
<p>如果你有兴趣尝试 <a href="https://newzone.top/" target="_blank" rel="noopener noreferrer">LearnData</a>，欢迎通过链接访问并复制模板尝试。具体的操作方法与常见问答我都写在博客中。如果有进一步的问题或讨论，欢迎在评论区留言。</p>
]]></content:encoded>
    </item>
    <item>
      <title>为了帮你用好 ChatGPT，我做了一个「咒语库]</title>
      <link>https://newzone.top/posts/2023-02-27-chatgpt_shortcuts.html</link>
      <guid>https://newzone.top/posts/2023-02-27-chatgpt_shortcuts.html</guid>
      <source url="https://newzone.top/rss.xml">为了帮你用好 ChatGPT，我做了一个「咒语库]</source>
      <description>最近，关于 ChatGPT 的讨论越来越多，但大多数人仅仅将其视为一款聊天机器人，并从猎奇的角度去测试其人工智能的回答。然而，ChatGPT 不仅仅是一个猎奇的 AI 玩具，未来它将会成为必备生产工具。ChatGPT 之类的 AI 工具将用它巨大的语言知识库，为我们创造更多的价值。 ChatGPT 的回复质量取决于提示词（即 Prompt）。这通常是用户提供的问题或文本，以激活模型生成回复。简单来说，prompt 就是用户想要询问的内容，作为输入送到 ChatGPT 中，ChatGPT 会尝试理解这个输入，然后输出合适的回答或响应。通过优化提示词，可以使 ChatGPT 生成更加准确、有用的回复。为了能让 ChatGPT 成为生产力工具，我花大量时间逐个研究提示词的规则和范例，如 ChatGPT Prompt Examples、Awesome ChatGPT Prompts、Learn Prompting 等。我筛选出了 163 个 Prompts（提示词），仅记录它们的功能而非内容，这就让我的笔记超过了 5000 字。提示词目录也变得越来越长，即使将浏览器全屏，也无法完整显示。起初，我制作提示词目录是为了方便自己，但每次需要查找提示词时，我不得不依靠记忆。这些笔记反而成为了负担，拖累 ChatGPT 的工作效率。</description>
      <category>工具</category>
      <pubDate>Mon, 27 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>最近，关于 ChatGPT 的讨论越来越多，但大多数人仅仅将其视为一款聊天机器人，并从猎奇的角度去测试其人工智能的回答。然而，ChatGPT 不仅仅是一个猎奇的 AI 玩具，未来它将会成为必备生产工具。ChatGPT 之类的 AI 工具将用它巨大的语言知识库，为我们创造更多的价值。</p>
<p>ChatGPT 的回复质量取决于提示词（即 Prompt）。这通常是用户提供的问题或文本，以激活模型生成回复。简单来说，prompt 就是用户想要询问的内容，作为输入送到 ChatGPT 中，ChatGPT 会尝试理解这个输入，然后输出合适的回答或响应。通过优化提示词，可以使 ChatGPT 生成更加准确、有用的回复。为了能让 ChatGPT 成为生产力工具，我花大量时间逐个研究提示词的规则和范例，如 <a href="https://platform.openai.com/examples" target="_blank" rel="noopener noreferrer">ChatGPT Prompt Examples</a>、<a href="https://github.com/f/awesome-chatgpt-prompts" target="_blank" rel="noopener noreferrer">Awesome ChatGPT Prompts</a>、<a href="https://learnprompting.org/" target="_blank" rel="noopener noreferrer">Learn Prompting</a> 等。我筛选出了 163 个 Prompts（提示词），仅记录它们的功能而非内容，这就让我的笔记超过了 5000 字。提示词目录也变得越来越长，即使将浏览器全屏，也无法完整显示。起初，我制作提示词目录是为了方便自己，但每次需要查找提示词时，我不得不依靠记忆。这些笔记反而成为了负担，拖累 ChatGPT 的工作效率。</p>
<p>为了更好地使用 ChatGPT，我将精选的提示词编入索引，根据领域和功能对其进行分类，添加针对提示词的标签筛选、关键词搜索、一键复制和中英文切换功能，创建了 ChatGPT Shortcut 项目。即使是初学者，你只需<strong>打开 <a href="https://www.aishort.top" target="_blank" rel="noopener noreferrer">ChatGPT Shortcut</a>，复制提示词，稍加修改后发送给 ChatGPT</strong>，就能获得指定输出，让你的生产力加倍！</p>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/2023-02-28-10-30-20.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>JsonTranslate 实用指南：怎样让你的项目说上 13 种语言？</title>
      <link>https://newzone.top/apps/devdocs/json-translate.html</link>
      <guid>https://newzone.top/apps/devdocs/json-translate.html</guid>
      <source url="https://newzone.top/rss.xml">JsonTranslate 实用指南：怎样让你的项目说上 13 种语言？</source>
      <description>JsonTranslate，一款专为开发者和内容创作者设计的多语言 JSON 翻译工具，支持 Google Translate、DeepL 和 DeepLX 翻译 API，助力项目国际化和本地化。无论你是在开发多语言网站、应用程序还是处理多语言数据集，JsonTranslate 都能提供简便的解决方案，轻松将 JSON 文件中的内容翻译为多种目标语言。</description>
      <category>工具</category>
      <pubDate>Tue, 19 Dec 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="https://tools.newzone.top/json-translate" target="_blank" rel="noopener noreferrer">JsonTranslate</a>，一款专为开发者和内容创作者设计的多语言 JSON 翻译工具，支持 Google Translate、DeepL 和 DeepLX 翻译 API，助力项目国际化和本地化。无论你是在开发多语言网站、应用程序还是处理多语言数据集，JsonTranslate 都能提供简便的解决方案，轻松将 JSON 文件中的内容翻译为多种目标语言。</p>
<figure><img src="https://img.newzone.top/2023-12-18-19-18-41.png?imageMogr2/format/webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>该工具的设计理念与市面上其他多语言翻译器不同。常见的翻译器虽然追求一键自动化，但通常配置繁琐，且往往需要付费订阅。JsonTranslate 的设计初衷是为了解决 ChatGPT Shortcut 和 IMGPrompt 等个人或开源项目中的英汉互译问题而设计，特别适合那些翻译文件不多的项目。</p>
<p>与传统的全站自动化翻译工具相比，JsonTranslate 更加注重根据用户需求进行精确翻译。用户可以方便地粘贴需要翻译的文本，甚至指定单个新增节点，从而简化多语言翻译流程，使得翻译工作更为高效和精确。</p>
]]></content:encoded>
      <enclosure url="https://img.newzone.top/2023-12-18-19-18-41.png?imageMogr2/format/webp" type="image/"/>
    </item>
    <item>
      <title>直播入门攻略零 | 硬件篇：直播设备</title>
      <link>https://newzone.top/apps/livestreaming/0_live_equipments.html</link>
      <guid>https://newzone.top/apps/livestreaming/0_live_equipments.html</guid>
      <source url="https://newzone.top/rss.xml">直播入门攻略零 | 硬件篇：直播设备</source>
      <description>直播已经成为一种主流的传播方式，几乎所有的行业都会使用它。经过两年的持续直播，我总结出了一套直播入门攻略，从设备、软件和技巧三个方面，帮助你快速入门直播，开始自己的直播之旅。 本文是直播入门攻略的前置篇，主要介绍直播所需的设备，以及如何避免购买不必要的高价设备。直播设备可分为电脑、补光灯、稳定器（三脚架）、音频采集（收音器）和视频采集（摄像头）。 电脑 OBS 直播对电脑配置要求较高，建议使用三年内购买的主流配置台式机。台机推荐预算在一万元以上，显卡为 3060 以上，内存为 32G。 补光灯 露脸主播一定要配柔光灯或环形灯，可以提升颜值。如果带眼镜的话，可以用小型补光灯代替环形灯，以免反射出光圈影响视觉。补光灯可以放在正面 45 度成蝴蝶光（派拉蒙光），可以显瘦显轮廓；背后可以使用辅助光或一张白纸反光，以防止正面灯光太亮。</description>
      <category>工具</category>
      <pubDate>Fri, 26 Jan 2024 14:18:01 GMT</pubDate>
      <content:encoded><![CDATA[<p>直播已经成为一种主流的传播方式，几乎所有的行业都会使用它。经过两年的持续直播，我总结出了一套直播入门攻略，从设备、软件和技巧三个方面，帮助你快速入门直播，开始自己的直播之旅。</p>
<p>本文是直播入门攻略的前置篇，主要介绍直播所需的设备，以及如何避免购买不必要的高价设备。直播设备可分为电脑、补光灯、稳定器（三脚架）、音频采集（收音器）和视频采集（摄像头）。</p>
<h2> 电脑</h2>
<p>OBS 直播对电脑配置要求较高，建议使用三年内购买的主流配置台式机。台机推荐预算在一万元以上，显卡为 3060 以上，内存为 32G。</p>
<h2> 补光灯</h2>
<p>露脸主播一定要配柔光灯或环形灯，可以提升颜值。如果带眼镜的话，可以用小型补光灯代替环形灯，以免反射出光圈影响视觉。补光灯可以放在正面 45 度成蝴蝶光（派拉蒙光），可以显瘦显轮廓；背后可以使用辅助光或一张白纸反光，以防止正面灯光太亮。</p>
<h2> 三脚架</h2>
<p>三脚架主要有两类：桌面款，建议高度为 55cm；站立款，建议高度为 210cm。价位从 10-500 元不等，效果无明显区别，新手用户的三脚架预算建议不要超过 100 元。</p>
<h2> 音频采集</h2>
<p>收音设备的费用从几元到几千元不等。手机的收音性能比绝大多数话筒好，如果你使用手机摄像方案，可以先不用购买收音器材。</p>
<p>廉价麦克风存在收音范围窄、不清晰、多噪音等问题，但价格低廉、使用方便，适合新人测试使用。</p>
<p>桌面直播多使用「声卡 + 话筒」方案，预算需要超过一千元。不要购买廉价的山寨声卡，还不如手机收音来得清晰。</p>
<p>外出直播或进阶用户推荐 RODE 或 DJI 的无线麦克风，这两款音频水准都可以吊打同行。RODE 是老牌话筒厂家，音质有保障；DJI 麦克风推出不久，但集百家之长，设计非常人性化，小白使用也很方便。</p>
<h2> 视频采集</h2>
<p>桌面摄像头、手机和微单相机都可以作为直播的视频采集来源。</p>
<h3> 摄像头</h3>
<p>桌面摄像头的价格在 50-1000 元不等，但实际效果没有太大的区别。个人体验过罗技 C930 后，发现画面模糊不清晰，将问题反馈给客服后得知，画质不清晰是桌面摄像头的通病。</p>
<p>不管是几十元的廉价摄像头还是上千元的罗技 C1000，它们的实际像素都<strong>只有 200 万</strong>。宣传中的 2000 万像素是通过软件放大的效果，画质并没有实质性的变化。入门用户可以选择 100 元的自动变焦摄像头。</p>
<p>桌面摄像头搭配三角架可以调整更佳的角度，购买时要注意摄像头是否有<strong>三脚架接口</strong>。</p>
<h3> 手机</h3>
<p>如果室内没有桌面摄像头，而又想用电脑做直播推流，可以考虑用手机替代摄像头，步骤可参考下方介绍。</p>
<h3> 相机</h3>
<p>相比摄像头的算法像素效果，只有相机才能达到真正意义上的高清直播。</p>
<p>如果你的相机有外接视频接口（例如：HDMI、mini HDMI、SDI），可以通过视频采集卡将相机视频转为直播视频传入电脑。索尼、佳能等主流相机都有专门的直播软件，不需要采集卡就可以直接连接电脑进行直播。运动相机 GoPro 也已经支持相机直播传输，希望国内厂商也能跟上。</p>
<p>将相机用作摄像头的费用较高，一般需要几千到几万，只建议已购买相机的主播采用此方案。</p>
<h2> 手机作摄像头</h2>
<h3> Camo</h3>
<p><a href="https://apps.apple.com/app/reincubate-camo/id1514199064?platform=iphone" target="_blank" rel="noopener noreferrer">Camo</a> 专用于 iOS 设备，连接数据线后可将 iPhone 或 iPad 变为直播摄像头。</p>
<h3> NDI</h3>
<p>NDI 是最稳定的，可自由调节拍摄参数。打开 NDI 应用后，需等待 NDI 界面周边出现绿框或红框，OBS 才可以识别到摄像头。不过 NDI 是收费应用，安卓用户可使用 <a href="https://wwe.lanzoup.com/iQCMh00b946b" target="_blank" rel="noopener noreferrer">NDI 调试 APK</a>。</p>
<h3> IP Webcam</h3>
<p><a href="https://play.google.com/store/apps/details?id=com.pas.webcam" target="_blank" rel="noopener noreferrer">IP Webcam</a> 在推流稳定性方面表现一般，偶尔出现丢帧，但对于个人直播使用来说，免费版本已经足够。你可以在 Google Play 上安装它，或使用<a href="https://wwva.lanzouq.com/iQAFF1dic4qf" target="_blank" rel="noopener noreferrer">国内的备用下载链接</a>。</p>
<p>以下是 IP Webcam 的基本设置步骤：</p>
<ol>
<li>滑动至应用底部，点击「开启服务器」，即可开始使用手机摄像头进行推流。</li>
<li>画面下方会显示一些类似 <code>http://192.168.2.234:8080</code> 的地址，请在局域网浏览器中打开此地址。</li>
<li>在浏览器中，你可以调整 IP 摄像头的推流设置。将流畅度设置为 90%，视频分辨率设为 720p，这可以有效减少卡顿。IP Webcam 的耗电量较低，适合长时间手机直播，并支持多种方式，包括视频和浏览器等。</li>
<li>在 OBS 中，选择「场景」&gt;「来源」&gt;「媒体源」，取消勾选本地文件，然后在「输入」中输入 IP 摄像头的视频地址，例如 <code>http://192.168.2.234:8080/video</code>。或者使用浏览器推流模式，在 OBS 中，选择「场景」&gt;「来源」&gt;「浏览器」，在「URL」中输入 IP 摄像头的全屏浏览器地址，例如 <code>http://192.168.2.234:8080/jsfs.html</code>。请注意：浏览器推流可能会导致闪烁。</li>
</ol>
<h3> 其他</h3>
<p>如果出现闪退等问题，可尝试使用 iriun webcam、DroidCam 和 ivcam。</p>
<p>不推荐使用无他伴侣，尽管国内有大量教程介绍它，但使用中会出现很多问题，例如：摄影角度很难控制；无法使用 FaceRig 等变脸应用；直播 10 分钟后，摄像头经常自动与 OBS 断开连接；直播 2 小时后，OBS 无法检测到无他伴侣。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>